steady_hist <- ggplot(steady_state, aes(x = State, y = ..density..)) +
geom_histogram(bins = 50, color = "black") + facet_wrap(~Species) + theme_bw()
State1 <- (steady_state %>% filter(Species == 1))$CenteredState
State2 <- (steady_state %>% filter(Species == 2))$CenteredState
State3 <- (steady_state %>% filter(Species == 3))$CenteredState
mean(State1 * State2)
mean(State1 * State3)
mean(State2 * State3)
State1
A
plot(State3[1:(endtime-1)], State1[2:endtime])
plot(State3[1:(endtime-1)], State2[2:endtime])
getwd()
setwd("Documents/Research/Holobionts/HostCompCol/")
getwd()
source("0_Functions.R")
ch <- 0.5
chm <- seq(0.5, 10, length.out = 200) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- c(10, 12)
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
pars <- list(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
num_repl <- 1
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
iterated_params$ParsID <- 1:nrow(iterated_params)
ini_cond_sds <- c(0.001, 0.5)
end_time <- 500
time_step <- 1
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
for(ini_cond_sd in ini_cond_sds) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
cur_feas <- (h_soln > 0) * (p_soln > 0) * (m_soln > 0)
ini_state <- c(h_soln, p_soln, m_soln) + rnorm(n = 3, mean = 0, sd = ini_cond_sd)
ini_state[ini_state <= 0] <- 0.0001
names(ini_state) <- c("Host", "Pathogen", "Mutualist")
out_dyn <- IntegrateDynamics(ini_state, cur_pars,
end_time, time_step,
fn = CoralMutPathDynamics)
out_dyn <- out_dyn %>%
filter(time > end_time / 2) %>%
melt(id.vars = c("time"))
J <- BuildJacobian(h_soln, p_soln, m_soln, cur_pars)
cur_eig <- GetEig(J)
cur_params$IniCondSd <- ini_cond_sd
cur_dyn <- cbind(cur_params, out_dyn) %>%
mutate(pred_soln = case_when(variable == "Host" ~ h_soln,
variable == "Mutualist" ~ m_soln,
variable == "Pathogen" ~ p_soln)) %>%
mutate(Eigenvalue = cur_eig,
Stable = ifelse(cur_feas, ifelse(cur_eig < 0,
"Feasible and stable",
"Feasible but unstable"),
"Not feasible"))
out_data <- rbind(out_data, cur_dyn)
}
}
proc_data <- out_data %>%
mutate(pred_soln = ifelse(pred_soln > 0, pred_soln, NA))
#ggplot(out_data,
#       aes(x = chm, y = Eigenvalue, color = as.factor(cm))) +
#  geom_point() + theme_classic() +
#  geom_hline(yintercept = 0) +
#  labs(x = "Added Host Colonization from the Mutualist",
#       y = "Eigenvalue",
#       color = "Mutualist\nColonization")
plMutBenefit <- ggplot(proc_data,
aes(x = chm, y = value)) +
facet_grid(cm~variable, labeller = label_bquote(rows = c[m] == .(cm), cols = .(variable))) +
geom_point(size = 2, alpha = 0.005) + theme_classic() +
geom_line(linewidth = 1, aes(x = chm, y = pred_soln, color = Stable)) +
scale_color_manual(values = c("green", "orange", "red")) +
labs(x = expression("Added Host Colonization from the Mutualist" ~ (c[hm])),
y = "Frequency",
color = "",
linetype = "") +
ggtitle("A") +
theme(text = element_text(size=15),
legend.text=element_text(size = 15),
legend.position = "top",
strip.background = element_blank(),
plot.caption = element_text(hjust = 0, face= "italic"),
plot.title.position = "plot",
plot.caption.position =  "plot")
plMutBenefit
ch <- c(0.5, 1.5)
chm <- seq(1.5, 20, length.out = 100) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- seq(2, 15, length.out = 100)
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
J <- BuildJacobian(h_soln, p_soln, m_soln, cur_pars)
cur_eig <- GetEig(J)
cur_feas <- (h_soln > 0) * (p_soln > 0) * (m_soln > 0)
cur_stable <- cur_eig < 0
cur_outcome <- ifelse(!cur_feas, "\nNot feasible\n",
ifelse(cur_stable, "\nFeasible\nand stable\n",
"\nFeasible\nbut unstable\n"))
cur_dyn <- cbind(cur_params, data.frame(Outcome = cur_outcome))
out_data <- rbind(out_data, cur_dyn)
}
plHeatMap <- ggplot(out_data,
aes(x = chm, y = cm, fill = Outcome)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("green", "orange", "red")) +
labs(x = expression("Added Host Colonization\nfrom the Mutalist" ~ (c[hm])),
y = expression("Mutualist Colonization" ~ c[m]),
fill = "") +
facet_wrap(~ch, labeller = label_bquote(rows = c[h] == .(ch)), nrow = 2) +
ggtitle("B") + scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plHeatMap
jpeg("./figs/Fig3MutBenefit.jpeg",
width = 3500, height = 2000, res = 300)
grid.arrange(plMutBenefit, plHeatMap,
layout_matrix = matrix(c(1, 1, 1, 1, 2, 2, 2), nrow = 1, ncol = 7))
dev.off()
plHeatMap <- ggplot(out_data,
aes(x = chm, y = cm, fill = Outcome)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("green", "orange", "red")) +
labs(x = expression(atop("Added Host Colonization", "from the Mutalist" ~ (c[hm]))),
y = expression("Mutualist Colonization" ~ c[m]),
fill = "") +
facet_wrap(~ch, labeller = label_bquote(rows = c[h] == .(ch)), nrow = 2) +
ggtitle("B") + scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plHeatMap
jpeg("./figs/Fig3MutBenefit.jpeg",
width = 3500, height = 2000, res = 300)
grid.arrange(plMutBenefit, plHeatMap,
layout_matrix = matrix(c(1, 1, 1, 1, 2, 2, 2), nrow = 1, ncol = 7))
dev.off()
plHeatMap <- ggplot(out_data,
aes(x = chm, y = cm, fill = Outcome)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("green", "orange", "red")) +
labs(x = expression(atop("Added Host Colonization", "from the Mutalist" ~ (c[hm]))),
y = expression("Mutualist Colonization" ~ (c[m])),
fill = "") +
facet_wrap(~ch, labeller = label_bquote(rows = c[h] == .(ch)), nrow = 2) +
ggtitle("B") + scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plHeatMap
jpeg("./figs/Fig3MutBenefit.jpeg",
width = 3500, height = 2000, res = 300)
grid.arrange(plMutBenefit, plHeatMap,
layout_matrix = matrix(c(1, 1, 1, 1, 2, 2, 2), nrow = 1, ncol = 7))
dev.off()
source("0_Functions.R")
ch <- 0.5
chm <- c(3, 4) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- 10
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
pars <- list(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
num_repl <- 1
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
iterated_params$ParsID <- 1:nrow(iterated_params)
end_time <- 1e3
time_step <- 0.01
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
ini_state <- c(h_soln, p_soln, m_soln) + rnorm(n = 3, mean = 0, sd = 0.001)
ini_state[ini_state <= 0] <- 0.001
names(ini_state) <- c("host", "pathogen", "mutualist")
out_dyn <- IntegrateDynamics(ini_state, cur_pars,
end_time, time_step,
fn = CoralMutPathDynamics)
cur_dyn <- cbind(cur_params, out_dyn)
out_data <- rbind(out_data, cur_dyn)
}
end_points <- out_data %>%
filter(time == max(time))
plot_data <- out_data %>%
mutate(PatEnd = case_when(chm == 2 ~ end_points[end_points$chm == 2,]$pathogen,
chm == 3 ~ end_points[end_points$chm == 3,]$pathogen,
chm == 4 ~ end_points[end_points$chm == 4,]$pathogen,
chm == 5 ~ end_points[end_points$chm == 5,]$pathogen)) %>%
mutate(MutEnd = case_when(chm == 2 ~ end_points[end_points$chm == 2,]$mutualist,
chm == 3 ~ end_points[end_points$chm == 3,]$mutualist,
chm == 4 ~ end_points[end_points$chm == 4,]$mutualist,
chm == 5 ~ end_points[end_points$chm == 5,]$mutualist))
source("0_Functions.R")
ch <- 0.5
chm <- c(3, 4) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- 10
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
pars <- list(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
num_repl <- 1
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
iterated_params$ParsID <- 1:nrow(iterated_params)
end_time <- 1e3
time_step <- 0.01
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
ini_state <- c(h_soln, p_soln, m_soln) + rnorm(n = 3, mean = 0, sd = 0.001)
ini_state[ini_state <= 0] <- 0.001
names(ini_state) <- c("host", "pathogen", "mutualist")
out_dyn <- IntegrateDynamics(ini_state, cur_pars,
end_time, time_step,
fn = CoralMutPathDynamics)
cur_dyn <- cbind(cur_params, out_dyn)
out_data <- rbind(out_data, cur_dyn)
}
end_points <- out_data %>%
filter(time == max(time))
plot_data <- out_data %>%
mutate(PatEnd = case_when(chm == 3 ~ end_points[end_points$chm == 3,]$pathogen,
chm == 4 ~ end_points[end_points$chm == 4,]$pathogen)) %>%
mutate(MutEnd = case_when(chm == 3 ~ end_points[end_points$chm == 3,]$mutualist,
chm == 4 ~ end_points[end_points$chm == 4,]$mutualist))
plBifurcation <- ggplot(plot_data, aes(x = pathogen, y = mutualist, color = time)) +
geom_path(size = 0.5) +
geom_point(aes(x = PatEnd, y = MutEnd), color = "red", size = 2) +
facet_wrap(~chm, scales = "free", labeller = label_bquote(cols = c[hm] == .(chm)), nrow = 1) +
theme_classic() +
scale_color_gradient(low = "darkblue", high = "green") +
labs(x = "Pathogen",
y = "Mutualist",
color = "Time") +
ggtitle("A") +
theme(text = element_text(size=15),
legend.text=element_text(size = 15),
strip.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.caption = element_text(hjust = 0, face= "italic"),
plot.title.position = "plot",
plot.caption.position =  "plot")
plBifurcation
### allee effect
ch <- 0.5
chm <- 5 # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- 10
dm <- 1
in_pars <- data.frame(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
end_time <- 5e2
time_step <- 1
freq_cutoff <- 1e-7
ini_hosts <- seq(0.001, 0.9, length.out = 100)
ini_muts <- seq(0.0001, 0.15, length.out = 100)
ini_path <- 0.0001 # should be less than the smaller value above
out_data <- data.frame()
for(i in 1:nrow(in_pars)) {
for(ini_host in ini_hosts) {
for(ini_mut in ini_muts) {
cur_params <- in_pars[i,]
cur_pars <- as.list(cur_params)
ini_state <- c(ini_host, ini_path, ini_mut)
names(ini_state) <- c("Host", "Pathogen", "Mutualist")
out_dyn <- IntegrateDynamics(ini_state, cur_pars,
end_time, time_step,
fn = CoralMutPathDynamics)
end_state <- as.numeric(out_dyn[nrow(out_dyn),2:4])
cur_params$IniMut <- ini_mut
cur_params$IniHost <- ini_host
cur_params$IniPath <- ini_path
out_coexist <- data.frame(Coexist = ifelse(prod(end_state > freq_cutoff),
"Coexistence",
"No coexistence"))
cur_dyn <- cbind(cur_params, out_coexist)
out_data <- rbind(out_data, cur_dyn)
}
}
}
out_data <- out_data %>%
mutate(Coexist = ifelse(IniMut + IniPath > IniHost, NA, Coexist))
plIniCond <- ggplot(out_data,
aes(x = IniHost, y = IniMut, fill = Coexist)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("blue", "gray"), na.value="white", na.translate = F) +
labs(x = "Initial Frequency of the Host",
y = "Initial Frequency of the Mutualist",
fill = "") +
facet_wrap(~ch, labeller = label_bquote(cols = c[h] == .(ch)), nrow = 1) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
ggtitle("B") +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plIniCond
jpeg("./figs/Fig4LimitCycles.jpeg",
width = 3000, height = 1750, res = 300)
grid.arrange(plBifurcation, plIniCond, nrow = 1)
dev.off()
jpeg("./figs/Fig4LimitCycles.jpeg",
width = 4000, height = 1500, res = 300)
grid.arrange(plBifurcation, plIniCond, nrow = 1)
dev.off()
plBifurcation <- ggplot(plot_data, aes(x = pathogen, y = mutualist, color = time)) +
geom_path(linewidth = 0.5) +
geom_point(aes(x = PatEnd, y = MutEnd), color = "red", size = 2) +
facet_wrap(~chm, scales = "free", labeller = label_bquote(cols = c[hm] == .(chm)), nrow = 1) +
theme_classic() +
scale_color_gradient(low = "darkblue", high = "green") +
labs(x = "Pathogen",
y = "Mutualist",
color = "Time") +
ggtitle("A") +
theme(text = element_text(size=15),
legend.text=element_text(size = 15),
strip.background = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
plot.caption = element_text(hjust = 0, face= "italic"),
plot.title.position = "plot",
plot.caption.position =  "plot")
plBifurcation
jpeg("./figs/Fig4LimitCycles.jpeg",
width = 4000, height = 1250, res = 300)
grid.arrange(plBifurcation, plIniCond, nrow = 1)
dev.off()
jpeg("./figs/Fig4Bifurcations.jpeg",
width = 4000, height = 1250, res = 300)
grid.arrange(plBifurcation, plIniCond, nrow = 1)
dev.off()
plMutBenefit
# heatmaps
ch <- c(0.5, 1.5)
chm <- seq(1.5, 10, length.out = 100) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- seq(4, 12, length.out = 100)
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
J <- BuildJacobian(h_soln, p_soln, m_soln, cur_pars)
cur_eig <- GetEig(J)
cur_feas <- (h_soln > 0) * (p_soln > 0) * (m_soln > 0)
cur_stable <- cur_eig < 0
cur_outcome <- ifelse(!cur_feas, "\nNot feasible\n",
ifelse(cur_stable, "\nFeasible\nand stable\n",
"\nFeasible\nbut unstable\n"))
cur_dyn <- cbind(cur_params, data.frame(Outcome = cur_outcome))
out_data <- rbind(out_data, cur_dyn)
}
plHeatMap <- ggplot(out_data,
aes(x = chm, y = cm, fill = Outcome)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("green", "orange", "red")) +
labs(x = expression(atop("Added Host Colonization", "from the Mutalist" ~ (c[hm]))),
y = expression("Mutualist Colonization" ~ (c[m])),
fill = "") +
facet_wrap(~ch, labeller = label_bquote(rows = c[h] == .(ch)), nrow = 2) +
ggtitle("B") + scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plHeatMap
jpeg("./figs/Fig3MutBenefit.jpeg",
width = 3500, height = 2000, res = 300)
grid.arrange(plMutBenefit, plHeatMap,
layout_matrix = matrix(c(1, 1, 1, 1, 2, 2, 2), nrow = 1, ncol = 7))
dev.off()
# heatmaps
ch <- c(0.5, 1.5)
chm <- seq(1.5, 10, length.out = 150) # needs to be bigger than or equal to ch
dh <- 1
dhp <- 0
cp <- 5
dp <- 1
cm <- seq(4, 12, length.out = 150)
dm <- 1
in_pars <- crossing(ch = ch, chm = chm, dh = dh, dhp = dhp,
cp = cp, dp = dp,
cm = cm, dm = dm)
iterated_params <- bind_rows(replicate(num_repl, in_pars, simplify = FALSE))
out_data <- data.frame()
for(i in 1:nrow(iterated_params)) {
cur_params <- iterated_params[i,]
cur_pars <- as.list(cur_params)
root_soln <- uniroot(f = PredEq, interval = c(0, 1), cur_pars)
h_soln <- root_soln$root
mp_soln <- GetPM(h_soln, cur_pars)
p_soln <- mp_soln[1]
m_soln <- mp_soln[2]
J <- BuildJacobian(h_soln, p_soln, m_soln, cur_pars)
cur_eig <- GetEig(J)
cur_feas <- (h_soln > 0) * (p_soln > 0) * (m_soln > 0)
cur_stable <- cur_eig < 0
cur_outcome <- ifelse(!cur_feas, "\nNot feasible\n",
ifelse(cur_stable, "\nFeasible\nand stable\n",
"\nFeasible\nbut unstable\n"))
cur_dyn <- cbind(cur_params, data.frame(Outcome = cur_outcome))
out_data <- rbind(out_data, cur_dyn)
}
plHeatMap <- ggplot(out_data,
aes(x = chm, y = cm, fill = Outcome)) +
geom_tile() + theme_classic() +
scale_fill_manual(values = c("green", "orange", "red")) +
labs(x = expression(atop("Added Host Colonization", "from the Mutalist" ~ (c[hm]))),
y = expression("Mutualist Colonization" ~ (c[m])),
fill = "") +
facet_wrap(~ch, labeller = label_bquote(rows = c[h] == .(ch)), nrow = 2) +
ggtitle("B") + scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(axis.text = element_text( size = 10 ),
panel.background = element_rect(fill = NA),
strip.background = element_blank(),
text = element_text(size=15),
plot.title.position = "plot",
plot.caption.position =  "plot")
plHeatMap
jpeg("./figs/Fig3MutBenefit.jpeg",
width = 3500, height = 2000, res = 300)
grid.arrange(plMutBenefit, plHeatMap,
layout_matrix = matrix(c(1, 1, 1, 1, 2, 2, 2), nrow = 1, ncol = 7))
dev.off()
